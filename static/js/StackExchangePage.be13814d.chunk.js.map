{"version":3,"file":"static/js/StackExchangePage.be13814d.chunk.js","mappings":"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","sources":["core/service/http.service.ts","template/service/search.service.ts","app/redux/search/slice/index.ts","app/controller/stackexchange.model.ts","app/components/Searching/index.tsx","app/components/TrendingTagsError/index.tsx","app/components/QuestionListing/index.tsx","app/view/stackexchange/index.tsx","app/pages/stackexchange/index.tsx","core/component/base/index.tsx"],"sourcesContent":["import { Service } from 'typedi';\nimport { UseQuery, UseMutation } from 'core/redux/type';\n\nfunction useRTKQuery<R>(useQuery: UseQuery<R>, args?: any) {\n    const { data, isLoading, isFetching, isSuccess, isError, error, refetch } =\n        useQuery(undefined || args);\n    return { data, isLoading, isFetching, isSuccess, isError, error, refetch };\n}\n\nfunction useRTKMutation<B>(useMutation: UseMutation<B>) {\n    const [mutationAction, { isLoading, isError, isSuccess, isUninitialized }] =\n        useMutation();\n\n    return { mutationAction, isLoading, isSuccess, isError, isUninitialized };\n}\n\n@Service()\nclass HttpService {\n    public queryAPI = useRTKQuery;\n    public mutationAPI = useRTKMutation;\n}\n\nexport default HttpService;\n","import { Container, Service } from 'typedi';\nimport HttpService from 'core/service/http.service';\nimport type { UseQuery } from 'core/redux/type';\n\n@Service()\nclass SearchService<R> {\n    protected httpService = Container.get(HttpService);\n\n    public query(useQuery: UseQuery<R>, args?: any) {\n        return args\n            ? this.httpService.queryAPI(useQuery, args)\n            : this.httpService.queryAPI(useQuery);\n    }\n}\n\nexport default SearchService;\n","import { coreStackExchangeSliceApi } from 'template/redux/slice/exchangestack';\nimport { QuestionDTO } from 'shared/dto/question.dto';\nimport { TagDTO } from 'shared/dto/tag.dto';\nimport { BaseDTO } from 'shared/dto/base.dto';\n\ninterface TagListDTO extends BaseDTO {\n    items: Array<TagDTO>;\n}\ninterface QuestionListDTO extends BaseDTO {\n    items: Array<QuestionDTO>;\n}\n\nexport type QuestionQueryType = { tag: string; page: number }\n\nexport const extendedApiSlice = coreStackExchangeSliceApi.injectEndpoints({\n    endpoints: (builder) => ({\n        getQuestionList: builder.query<\n            Array<QuestionDTO>,\n            QuestionQueryType\n        >({\n            query: ({ tag, page }) =>\n                `/questions?tagged=${tag}&pagesize=20&page=${page}&&site=stackoverflow`,\n            transformResponse(rawResult: QuestionListDTO, meta, arg) {\n                return rawResult.items;\n            },\n            providesTags: (result) => {\n                return result\n                    ? [\n                          ...result.map(({ question_id }) => ({\n                              type: 'Questions' as const,\n                              question_id,\n                          })),\n                          { type: 'Questions', id: 'LIST' },\n                      ]\n                    : [{ type: 'Questions', id: 'LIST' }];\n            },\n        }),\n        getTagList: builder.query<Array<TagDTO>, void>({\n            query: () =>\n                `/tags?pagesize=10&page=1&order=desc&sort=popular&site=stackoverflow`,\n            transformResponse(rawResult: TagListDTO, meta, arg) {\n                return rawResult.items;\n            },\n            providesTags: (result) => {\n                return result\n                    ? [\n                          ...result.map(({ name }) => ({\n                              type: 'Tags' as const,\n                              name,\n                          })),\n                          { type: 'Tags', id: 'LIST' },\n                      ]\n                    : [{ type: 'Tags', id: 'LIST' }];\n            },\n        }),\n    }),\n});\n\nexport const { useGetQuestionListQuery, useGetTagListQuery } = extendedApiSlice;\n","import Container from \"typedi\";\nimport SearchService from \"template/service/search.service\";\nimport { QuestionDTO } from \"shared/dto/question.dto\";\nimport { \n    QuestionQueryType,\n    useGetQuestionListQuery, \n    useGetTagListQuery \n} from \"app/redux/search/slice\";\nimport { TagDTO } from \"shared/dto/tag.dto\";\n\nclass StackExchangeModel {\n    public readonly questionService = Container.get(SearchService<Array<QuestionDTO>>);\n    public readonly tagService = Container.get(SearchService<Array<TagDTO>>);\n\n    public questions(questionQuery: QuestionQueryType) {\n        return this.questionService.query(useGetQuestionListQuery, questionQuery);\n    }\n\n    public tags() {\n        return this.tagService.query(useGetTagListQuery);\n    }\n}\n\nexport default StackExchangeModel","import StackExchangeModel from 'app/controller/stackexchange.model';\nimport * as React from 'react';\nimport { TagDTO } from 'shared/dto/tag.dto';\n\nexport interface ISearchingProps {\n    initValue: string;\n    tagList: TagDTO[] | undefined;\n    setTag: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport const Searching: React.FunctionComponent<ISearchingProps> = (props) => {\n    const { initValue, tagList, setTag } = props;\n    const [valInput, setValInput] = React.useState<string>('');\n    const [currentTags, setCurrentTags] = React.useState<TagDTO[] | undefined>(\n        tagList\n    );\n\n    React.useEffect(() => {\n        setTag(initValue);\n    }, []);\n\n    const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setValInput(e.target.value);\n    };\n\n    React.useEffect(() => {\n        const filterTag = tagList?.filter(\n            (item) => item.name.indexOf(valInput) !== -1\n        );\n        setCurrentTags(filterTag);\n    }, [valInput]);\n\n    let renderTagList;\n\n    function handleOnSelectTagName(selectedTagName: string) {\n        return () => {\n            setValInput(selectedTagName);\n            setTag(selectedTagName);\n        };\n    }\n\n    renderTagList = (\n        <div className=\"\">\n            <h3 className=\"inline-block mt-6 mb-2 text-3xl font-extrabold tracking-tight text-gray-900 dark:text-white\">\n                Trending\n            </h3>\n            <ul className=\"flex\">\n                {currentTags?.map((item, index) => (\n                    <button\n                        className=\"text-xs inline-flex items-center font-bold leading-sm uppercase px-3 py-1 bg-blue-200 text-blue-700 rounded-full\"\n                        key={`${index}-${item.name}`}\n                        onClick={handleOnSelectTagName(item.name)}\n                    >\n                        {item.name}\n                    </button>\n                ))}\n            </ul>\n        </div>\n    );\n\n    return (\n        <div className=\"\">\n            <input\n                className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\"\n                type=\"text\"\n                placeholder=\"Tag\"\n                onChange={handleOnChange}\n                value={valInput}\n            />\n            {renderTagList}\n        </div>\n    );\n};\n","import { SerializedError } from '@reduxjs/toolkit';\nimport { FetchBaseQueryError } from '@reduxjs/toolkit/dist/query';\nimport * as React from 'react';\n\ninterface ITrendingTagsErrorProps {\n    error: FetchBaseQueryError | SerializedError | undefined;\n}\n\nexport const TrendingTagsError: React.FunctionComponent<\n    ITrendingTagsErrorProps\n> = (props) => {\n    const { error } = props;\n    return <div>{error?.toString()}</div>;\n};\n\n","import * as React from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport { FetchBaseQueryError } from '@reduxjs/toolkit/dist/query';\nimport StackExchangeModel from 'app/controller/stackexchange.model';\nimport { Loading } from 'template/component/Loading';\n\n// *** ATTENTION: API maybe was banned because request many time by onScroll Event\n// *** Please using comment below to mock data\nimport { questionsFakeData } from 'app/constant';\n\n\ninterface IQuestionListingProps {\n    model: StackExchangeModel;\n    tag: string;\n}\n\nconst QuestionListing: React.FunctionComponent<IQuestionListingProps> = (\n    props\n) => {\n    const [page, setPage] = React.useState<number>(1);\n    const { tag, model } = props;\n\n    let questionList;\n\n    const { data, isLoading, isFetching, isSuccess, isError, error } =\n        model.questions({\n            tag,\n            page,\n        });\n\n    const handleScroll = () => {\n        const bottom =\n            Math.ceil(window.innerHeight + window.scrollY) >=\n            document.documentElement.scrollHeight;\n\n        if (bottom) {\n            setPage((prevState) => (prevState += 1));\n            console.log('at the bottom');\n        }\n    };\n    React.useEffect(() => {\n        window.addEventListener('scroll', _.throttle(handleScroll, 10000), {\n            passive: true,\n        });\n\n        return () => {\n            window.removeEventListener('scroll', handleScroll);\n        };\n    }, []);\n\n\n    if (isLoading) {\n        questionList = <Loading isLoading={true} />;\n    } else if (isSuccess) {\n    questionList = (\n        <ul className=\"\">\n            {/*\n                // *** ATTENTION: API maybe was banned because request many time by onScroll Event\n                // *** Please using comment below to mock data\n            */}\n            {/* {questionsFakeData.items!.map((item) => ( */}\n            {data!.map((item) => (\n                <li key={`${item.question_id}`}>\n                    <article className=\"flex flex-col justify-between px-3 py-1 bg-white rounded-lg border border-gray-100 my-3\">\n                        <Link\n                            to={`${item.link}`}\n                            className=\"flex text-2xl font-semibold text-gray-800 dark:text-gray-200\"\n                        >\n                            {item.title}\n                        </Link>\n                        <div className=\"flex justify-between px-3 py-1 bg-white items-center my-3 w-full\">\n                            <div className=\"flex relative\">\n                                <div className=\"flex flex-col relative w-16 rounded-full items-center\">\n                                    <label htmlFor=\"_score\">score</label>\n                                    <span\n                                        className={`${\n                                            item.score < 0\n                                                ? 'text-red-500 font-bold'\n                                                : ''\n                                        }`}\n                                    >\n                                        {item.score}\n                                    </span>\n                                </div>\n                                <div className=\"flex flex-col relative w-16 rounded-full items-center\">\n                                    <label htmlFor=\"_score\">answer</label>\n                                    <span\n                                        className={`w-full text-center ${\n                                            item.answer_count > 1 &&\n                                            !item.is_answered\n                                                ? 'border border-green-500 text-green-500'\n                                                : ' text-white bg-green-500'\n                                        }`}\n                                    >\n                                        {item.answer_count}\n                                    </span>\n                                </div>\n                                <div className=\"flex flex-col relative w-16 rounded-full items-center\">\n                                    <label htmlFor=\"_count\">count</label>\n                                    <span>{item.view_count}</span>\n                                </div>\n                            </div>\n                            <div className=\"flex flex-col relative w-16 rounded-full items-center\">\n                                <img\n                                    className=\"w-full h-full object-cover rounded-full\"\n                                    src={item.owner.profile_image}\n                                    alt=\"_profile_img\"\n                                />\n                                <span className=\"text-xs text-center mt-2\">\n                                    {item.owner.display_name}\n                                </span>\n                            </div>\n                        </div>\n                    </article>\n                </li>\n            ))}\n        </ul>\n    );\n    } else if (isError) {\n        questionList = <QuestionListingError error={error} />;\n    }\n    return <div className=\"\">{questionList}</div>;\n};\n\ninterface ITrendingTagsErrorProps {\n    error: FetchBaseQueryError | SerializedError | undefined;\n}\n\nexport const QuestionListingError: React.FunctionComponent<\n    ITrendingTagsErrorProps\n> = (props) => {\n    const { error } = props;\n    return <div>{error?.toString()}</div>;\n};\n\nexport default QuestionListing;\n","import * as React from 'react';\nimport { Searching } from 'app/components/Searching';\nimport { TrendingTagsError } from 'app/components/TrendingTagsError';\nimport StackExchangeModel from 'app/controller/stackexchange.model';\nimport { Loading } from 'template/component/Loading';\nimport QuestionListing from 'app/components/QuestionListing';\n\n// *** ATTENTION: API maybe was banned because request many time by onScroll Event\n// *** Please using comment below to mock data\nimport { tagsFakeData } from 'app/constant';\n\nexport interface IStackExchangeViewProps {\n    model: StackExchangeModel;\n}\n\nconst StackExchangeView: React.FunctionComponent<IStackExchangeViewProps> = (\n    props\n) => {\n    \n    const { model } = props;\n\n    let trendingTags;\n    let searching;\n\n    const [tag, setTag] = React.useState<string>('');\n    // *** ATTENTION: API maybe was banned because request many time by onScroll Event\n    // *** Please using comment below to mock data\n    /*\n    searching = (\n        <Searching\n            initValue={tagsFakeData.items[0].name}\n            tagList={tagsFakeData.items}\n            setTag={setTag}\n        />\n    );\n    */\n    // *** ATTENTION: API maybe was banned because request many time by onScroll Event\n    // *** Please comment the fetching API:\n    // *** START HERE\n    const { data, isLoading, isFetching, isSuccess, isError, error } =\n        model.tags();\n\n    \n    if (isLoading) {\n        trendingTags = <Loading isLoading={true} />;\n    } else if (isSuccess) {\n        searching = (\n            <Searching\n                initValue={data![0].name}\n                tagList={data}\n                setTag={setTag}\n            />\n        );\n    } else if (isError) {\n        trendingTags = <TrendingTagsError error={error} />;\n    }\n    // *** ATTENTION: API maybe was banned because request many time by onScroll Event\n    // *** Please comment the fetching API:\n    // *** END HERE\n\n    return (\n        <div className=\"p-7\">\n            {searching}\n            <QuestionListing tag={tag} model={model} />\n        </div>\n    );\n};\n\nexport default StackExchangeView;\n","import * as React from 'react';\nimport { BaseComponent } from 'core/component/base';\nimport StackExchangeModel from 'app/controller/stackexchange.model';\nimport { IStackExchangeViewProps } from 'app/view/stackexchange';\nimport StackExchangeView from 'app/view/stackexchange';\n\nclass StackeExchangePage extends BaseComponent({\n    model: new StackExchangeModel(),\n})<IStackExchangeViewProps> {\n    baseElement = () => <StackExchangeView model={this.props.model} />;\n}\n\nexport default StackeExchangePage;\n","import * as React from 'react';\n\nexport function BaseComponent<T>(defaultProps: Partial<T>) {\n    abstract class _BaseComponent<T> extends React.PureComponent<T> {\n\n        static getDerivedStateFromError(error: Error) {\n            // Update state so the next render will show the fallback UI.\n            return { error };\n        }\n\n        public componentDidCatch(error: Error, _errorInfo: React.ErrorInfo) {\n            // Log to console, or send to reporting service\n            console.error(error);\n        }\n\n        public static defaultProps = defaultProps;\n\n        abstract baseElement: React.FunctionComponent<this['props']>;\n\n        // constructor(props: T) {\n\t\t// \tsuper(props);\n\t\t// }\n\n        public render() {\n            return React.createElement(this.baseElement);\n        }\n    }\n    return _BaseComponent;\n}\n"],"names":["useRTKQuery","useQuery","args","data","isLoading","isFetching","isSuccess","isError","error","refetch","useRTKMutation","useMutation","mutationAction","isUninitialized","Service","queryAPI","mutationAPI","httpService","Container","HttpService","this","extendedApiSlice","coreStackExchangeSliceApi","endpoints","builder","getQuestionList","query","tag","page","transformResponse","rawResult","meta","arg","items","providesTags","result","map","type","question_id","id","getTagList","name","useGetQuestionListQuery","useGetTagListQuery","questionService","SearchService","tagService","questionQuery","Searching","props","initValue","tagList","setTag","React","valInput","setValInput","currentTags","setCurrentTags","renderTagList","filterTag","filter","item","indexOf","className","index","onClick","selectedTagName","placeholder","onChange","e","target","value","TrendingTagsError","toString","QuestionListingError","questionList","setPage","model","questions","handleScroll","Math","ceil","window","innerHeight","scrollY","document","documentElement","scrollHeight","prevState","console","log","addEventListener","_","passive","removeEventListener","Loading","to","link","title","htmlFor","score","answer_count","is_answered","view_count","src","owner","profile_image","alt","display_name","searching","tags","StackeExchangePage","baseElement","defaultProps","_BaseComponent","_errorInfo","BaseComponent","StackExchangeModel"],"sourceRoot":""}